import { type NextRequest, NextResponse } from "next/server"

export const runtime = "nodejs"
export const dynamic = "force-dynamic"

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    const { pages, format, bookType = "story", title = "Generated Book" } = body

    // Validate input
    if (!pages || !Array.isArray(pages)) {
      return NextResponse.json({ error: "Invalid pages data" }, { status: 400 })
    }

    const kindleContent = generateKindleContent(pages, title, bookType)
    const filename = `${title.replace(/[^a-zA-Z0-9]/g, "-").toLowerCase()}.epub`

    console.log("[v0] Generated Kindle content for", pages.length, "pages")

    return new NextResponse(kindleContent, {
      status: 200,
      headers: {
        "Content-Type": "application/epub+zip",
        "Content-Disposition": `attachment; filename="${filename}"`,
        "Cache-Control": "no-store",
        "Content-Length": kindleContent.length.toString(),
      },
    })
  } catch (error) {
    console.error("[v0] Kindle generation error:", error)
    return NextResponse.json(
      { error: "Failed to generate Kindle format", details: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 },
    )
  }
}

function generateKindleContent(pages: any[], title: string, bookType: string): Buffer {
  // Generate basic EPUB structure for Kindle compatibility
  const htmlContent = `
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>${title}</title>
    <meta charset="utf-8"/>
    <style>
        body { font-family: serif; margin: 2em; }
        .page { page-break-after: always; margin-bottom: 2em; }
        .page-number { text-align: center; font-size: 0.8em; color: #666; }
        .story-text { font-size: 1.2em; line-height: 1.6; }
        .activity-title { font-size: 1.4em; font-weight: bold; margin-bottom: 1em; }
        .instructions { font-style: italic; margin-bottom: 1em; }
        .image-placeholder { 
            border: 1px solid #ccc; 
            padding: 2em; 
            text-align: center; 
            background: #f9f9f9; 
            margin: 1em 0;
        }
    </style>
</head>
<body>
    <div class="title-page">
        <h1 style="text-align: center; margin-top: 3em;">${title}</h1>
        <p style="text-align: center; margin-top: 2em;">Generated by OnePromptBook</p>
    </div>
    
    ${pages
      .map(
        (page, index) => `
        <div class="page">
            <div class="page-number">Page ${index + 1}</div>
            
            ${page.title ? `<h2 class="activity-title">${page.title}</h2>` : ""}
            
            ${page.instructions ? `<p class="instructions">${page.instructions}</p>` : ""}
            
            ${
              page.imagePrompt
                ? `
                <div class="image-placeholder">
                    <p><em>Image: ${page.imagePrompt}</em></p>
                </div>
            `
                : ""
            }
            
            ${page.text ? `<div class="story-text">${page.text}</div>` : ""}
            
            ${page.activityType ? `<p><strong>Activity Type:</strong> ${page.activityType}</p>` : ""}
        </div>
    `,
      )
      .join("")}
    
    <div class="page">
        <h2>About This Book</h2>
        <p>This ${bookType} book was generated using OnePromptBook's AI-powered creation system.</p>
        <p>Generated on: ${new Date().toLocaleDateString()}</p>
        <p>Total pages: ${pages.length}</p>
    </div>
</body>
</html>
  `.trim()

  return Buffer.from(htmlContent, "utf8")
}
